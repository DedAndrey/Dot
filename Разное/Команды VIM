ESC								перейти в режим просмотра

== Навигация ==
hjkl, стрелочки					перемещение курсора в разные стороны
Ctrl+o, Ctrl+i					возвращение к предыдущему/следующему изменению
Ctrl+u, Ctrl+d					Page Up / Page Down
Ctrl+y, Ctrl+e					перемотка вверх/вниз без движения курсора
zz								перемотка. текст под курсором остается по центру
========
:<n>							перейти на строку #n
<n>G							перейти на строку номер, потом "G"
%								перейти к парной скобке

== Редактирование файлов ==
:e **/filename.c				редактировать файл (с поиском по имени)
:w [fname]						записать изменения
:wa								сохранить изменения во всех файлах
:wq, :x							сохранить файл и выйти
:w !sudo tee %					сохранение по root'ом
:q								выйти из редактора
:q!								выйти из редактора, не сохраняя изменения
:earlier 1m						возвращаем предыдущее состояние документа
:later							отмена. последнее состояние документа

== Добавление ==
i								режим вставки
I								добавление в начало строки
========
a								режим добавления
A								добавление в конец строки
o								добавить строку сразу за текущей
O								добавить строку перед текущей
R								писать поверх имеющегося текста
u, :u[ndo]						отмена предыдущего действия (undo)
Ctrl-R, :red[o]					отмена отмены предыдущего действия (redo)

== Копирование ==
y								копировать
yy								копировать строку
<n>y							скопировать n+1 строку

== Выделение ==
v + hjkl						выделение текста
Ctrl + v							выделение прямоугольной области
viw								выделить слово
Shift+v или 0v$					выделить строку
	^v$							выделить строку, начиная с первого непробельного символа
	vi(							выделить все между ближайшими, в данном случае круглыми, скобками
	va(							выделить все между ближайшими, в данном случае круглыми, включая сами скобки
	vt,							выделить все до ближайшей запятой
	v2j							выделить на две строки вниз
	vip							выделить параграф
========
yiw								скопировать слово
yy								скопировать строку
	y2y							скопировать две строки
	N,M ya						копировать в буфер обмена строки с N до M включительно
========
gu								привести к нижнему регистру
gU								привести к верхнему регистру

== Удаление/вставка ==
DEL								удалить следующий символ
x								удалить текущий символ
d								вырезать (удалить) (любые удалённые строки попадают в буфер обмена)
dd								вырезать (удалить) строку
Ndd								вырезать (удалить) N строк
<n>d							вырезать (удалить) n+1 строку
cc								вырезать (удалить) и начать редактирование
	dip							вырезать (удалить) параграф
	di(							вырезать (удалить) содержимое в данном случае круглых скобок
	da[							вырезать (удалить) содержимое в данном случае квадратных скобок и сами скобки
	dt.							вырезать (удалить) до следующей точки
========
p								вставить после курсора
[p								вставить перед курсором
========
xp								поменять две буквы местами

== Комментарии ==
Plugin 'preservim/nerdcommenter'
<leader>						обычно это \
[count]<leader>cc				закомментировать текущую строку или выделенный текст в visual mode
[count]<leader>cs				закомментировать выбранные строки с помощью красивого блочного форматированного макета
[count]<leader>cn				тоже, что cc, но сильнее вложенность
[count]<leader>cl				тоже, что cc, за исключением того, что разделители выровнены по левой стороне
[count]<leader>cb				тоже, что cc, за исключением того, что разделители выровнены по обеим сторонам
[count]<leader>cy				тоже, что cc, за исключением того, что сначала "yanked" комментируемые строки
========
[count]<leader>cm				комментирует выбранные строки, используя только один набор составных разделителей
<leader>ca						переключается на альтернативный набор разделителей (если они предусмотрены)
========
[count]<leader>ci				переключить состояние комментирования для выбранных строк индивидуально
[count]<leader>c<space> 		переключить состояние комментирования для выбранных строк. Зависит от состояния верхней выбранной строки
========
<leader>c$						комментирует текущую строку от курсора до конца строки
<leader>cA						добавляет разделители комментариев в конец строки и переходит в режим вставки между ними
========
[count]<leader>cu				раскоментировать выбранные строки

== Сворачивание ==
zc								свернуть блок
zo								развернуть блок
zM								закрыть все блоки
zR								открыть все блоки
za								инвертирование
zf								см :set foldmethod=manual
:set foldenable					включить свoрачивание
:set foldmethod=syntax			сворачивание на основе синтаксиса
:set foldmethod=indent			сворачивание на основе отступов
:set foldmethod=manual			выделяем участок с помощью v и говорим zf
:set foldmethod=marker			сворачивание на основе маркеров в тексте
:set foldmarker=bigin,end		задаем маркеры начала и конца блока

== Окружения ==
Plugin 'tpope/vim-surround', "|" - позиция курсора

Normal mode
-----------
ds			удалить окружение
cs			изменить окружение
ys			добавить окружение
yS			размещает элементы окружения на отдельных строках, добавляет отступ
yss			окружает целую строку
ySs (ySS)	окружает целую строку, размещает элементы окружения на отдельных строках, добавляет отступ
	} добавляет пробелы, { без пробелов

Visual mode
-----------
s			добавить окружение
S			размещает элементы окружения на отдельных строках, добавляет отступ

Insert mode
-----------
<Ctrl-s> (<Ctrl-g>s)			добавить окружение
<Ctrl-s><Ctrl-s> (<Ctrl-g>S)	размещает элементы окружения на отдельных строках, добавляет отступ

== Отступы ==
[#]>							сдвинуть выделенное вправо
[#]<							сдвинуть выделенное влево
[#]>>							сдвинуть строку вправо
[#]<<							сдвинуть строку влево
set tabstop=#					для табуляции используется # пробелов
set shiftwidth=#				в командах отступа используется # пробелов
set [no]expandtab				заменять ли табуляцию на соответствующее число пробелов

== Маркеры ==
ma								установить локальный маркер a
mB								установить глобальный маркер B
`c								перейти к локальному маркеру c
`0								вернуться на позицию, на которой закончили работу при закрытии vim
:marks							просмотр маркеров
set viminfo='1000,f1			маркеры пишутся в ~/.viminfo, восстанавливаясь при следующем запуске vim. маркер " хранит последнюю позицию курсора в файле

== Работа с вкладками (табами) ==
:tabnew [fname]					создать таб
:tabs							вывести список табов
:tabn							следующий таб
:tabp							предыдущий таб
<n>gt							перейти на таб #n
gt								следующий таб
gT								предыдущий таб
:tabm +1						переместить таб вперед на одну позицию
:tabm -1						переместить таб назад на одну позицию
:tabm 2							переместить таб на заданную позицию (нумерация начинается с нуля)

== Работа с буферами ==
Plugin 'jeetsukumaran/vim-buffergator'
<leader>					обычно это \

<Leader>b					окно со списком всех буферов
<Leader>B, q				закрыть окно со списком всех буферов
<Leader>to					окно со списком всех вкладок
<Leader>tc, q				закрыть окно со списком всех вкладок
Ctrl-N (или SPACE)			пролистать список буферов
Ctrl-P (или Ctrl-SPACE)		в обратную сторону

o или ENTER		открыть
go или 			открыть, но оставить фокус на списке
s или Ctrl-S	открыть в новом горизонтальном сплите
S или 			открыть в новом горизонтальном сплите, но оставить фокус на списке
i или Ctrl-V	открыть в новом вертикальном сплите
I или 			открыть в новом вертикальном сплите, но оставить фокус на списке
t или Ctrl-T	открыть в новой вкладке

gb (или Мета-b)				пролистать стек буферов, не открывая список
gB (или Мета-Shift-b)		в обратную сторону
(number)[b					перейти к буферу по номеру
(number)]b					в обратную сторону
\LEFT, \UP, \RIGHT, \DOWN	сплит нового окна

== Работа с окнами ==
:split							горизонтальное разбиение
:vsplit							вертикальное разбиение
Ctrl+W, затем
с								закрыть окно
+-								изменение высоты текущего окна
<>								изменение ширины текущего окна
=								установить равный размер окон
hjkl или стрелочки				перемещение между окнами

== Боковая панель NERDTree ==
Plugin 'scrooloose/nerdtree'
<leader>		обычно это \

<leader>n		передать фокус
Ctrl+n			включить
Ctrl+t			переключить состояние отображения
Ctrl+f			поиск
Ctrl+W, <>		изменение ширины панели
Shift+A			распахнуть на весь экран

o или ENTER		открыть
go или 			открыть, но оставить фокус на списке
s или Ctrl-S	открыть в новом горизонтальном сплите
S или 			открыть в новом горизонтальном сплите, но оставить фокус на списке
i или Ctrl-V	открыть в новом вертикальном сплите
I или 			открыть в новом вертикальном сплите, но оставить фокус на списке
t или Ctrl-T	открыть в новой вкладке

== Регистры ==
"ayy							скопировать строку в регистр a
"bdd							вырезать строку и поместить в регистр b
"С2d							вырезать три строки и дописать в конец регистра C
:reg [name1][name2][...]		просмотреть содержимое регистров

== Сессии ==
mksession file.session			сохранить текущую сессию
source file.session				восстановить ранее сохраненную сессию

== Макросы ==
qa								записать макрос с именем a
q								в режиме записи макроса: закончить запись
@a								выполнить макрос с именем a
@@								повторить последний макрос

== Подсветка синтаксиса ==
:syntax on						включить подсветку
:syntax off						выключить подсветку (по умолчанию)

== Перенос строк ==
:set wrap						разрешить word wrap (по умолчанию)
:set nowrap						запретить word wrap

== Нумерация строк ==
:set number						включить нумерацию строк
:set nonumber					отключить нумерацию строк

== Проверка орфографии ==
:set spell spelllang=ru,en		включить проверку орфографии
:set nospell					выключить проверку орфографии
]s								следующее слово с ошибкой
[s								предыдущее слово с ошибкой
z=								замена слова на альтернативу из списка
zg								good word
zw								wrong word
zG								ignore word

== Работа с кодировкой ==
e ++enc=<имя кодировки>			Редактирование файла в ??? кодировке
w ++enc=<имя кодировки>			Сохранить файл в новой кодировке
set fileencodings=utf-8,koi8-r	Список автоматически определяемых кодировок в порядке убывания приоритета

== Подсветка выбранного ==
Space+m		подсветить выбранное
Space+w		подсветить слово
Space+c		убрать подсветку выбранного
Space+M		убрать всю подсветку

Space+j		quickhl-cword-toggle
Space+]		quickhl-tag-toggle
H			operator-quickhl-manual-this-motion

== Поиск CtrlP ==
Ctrl+P, затем
F5								чтобы очистить кэш для текущего каталога
Ctrl-f и Ctrl-b					переключить режимы
Ctrl-d							переключить на поиск по имени файла, а не по полному пути
Ctrl-r							переключиться в режим регулярных выражений
Ctrl-j, Ctrl-k или стрелочки	навигация по списку результатов
Ctrl-n, Ctrl-p					выбрать следующую/предыдущую строку в истории
Ctrl-y							создайте новый файл и его родительский каталог
Ctrl-z							множественное выделение файлов 
Ctrl-o							открыть выбранное

== Поиск и замена в файле ==
/Выражение						поиск выражения в файле
\cВыражение						поиск без учета регистра
n								следующее совпадение
N								предыдущее совпадение
:%s/foo/bar/gi					замена строк, см http://eax.me/regular-expr/

== Поиск по всему проекту ==
:vimgrep /EXPR/ **/*.c			поиск по регулярному выражению
:copen							показать все найденные места
:close							скрыть все найденные места
:cn								переход к следующему результату
:cp								переход к предыдущему результату

== Печать ==
:ha[rdcopy]						распечатать документ
:set printoptions=duplex:off	отключить двустороннюю печать

== Команды ==
:pwd							текущий каталог
:cd [path]						перейти в другой каталог
:!команда						выполнить команду - man, git, и так далее стрелочками вверх и вниз можно автодополнять команды и искать по истории
:color <name>					выбор цветовой схемы
:set [no]wildmenu				при автодополнении в командной строке над ней выводятся возможные варианты
:set list						отображать табуляцию и переводы строк
q:								история команд
.								повторение последней команды
:ab [сокращение] [его замена]
========
Tab, Ctrl+p			автоматическое дополнение текста (в режиме редактирования)
:%!xxd				шестнадцатеричный редактор (:%!xxd -r обратно)
:%Tohtml			текущий файл в виде веб-страницы
Ctrl+r,=,<expr>		вставить выражение, например 5*2 - 3 (в режиме редактирования)
Ctrl+G				номер текущей строки, общее число строк в файле и его имя

== Latex ==
:LLPStartPreview
:LLPStartPreview <root-filename>

The mappings generally start with <localleader>l     

Document navigation through
    table of content
    table of labels
    proper settings for 'include', 'includexpr', 'suffixesadd' and 'define', which among other things
        allow :h include-search and :h definition-search
        give enhanced gf command

Easy access to (online) documentation of packages
Word count (through texcount)
Motions
    Move between section boundaries with [[, [], ][, and ]]
    Move between environment boundaries with [m, [M, ]m, and ]M
    Move between math environment boundaries with [n, [N, ]n, and ]N
    Move between frame environment boundaries with [r, [R, ]r, and ]R
    Move between comment boundaries with [* and ]*
    Move between matching delimiters with %

Text objects
    ic ac Commands
    id ad Delimiters
    ie ae LaTeX environments
    i$ a$ Inline math structures
    iP aP Sections
    im am Items

Other mappings
    Delete the surrounding command, environment or delimiter with dsc/dse/ds$/dsd
    Change the surrounding command, environment or delimiter with csc/cse/cs$/csd
    Toggle starred command or environment with tsc/tse
    Toggle between e.g. () and \left(\right) with tsd
    Toggle (inline) fractions with tsf
    Close the current environment/delimiter in insert mode with ]]
    Insert new command with <F7>
    Convenient insert mode mappings for faster typing of e.g. maths
    Context menu on citations (e.g. \cite{...}) mapped to <cr>

Improved folding (:h 'foldexpr')
Improved indentation (:h 'indentexpr')

== Тэги ==
:GscopeFind {querytype} {name}
{querytype} corresponds to the actual cscope line interface numbers as well as default nvi commands:
0 or s: Find this symbol
1 or g: Find this definition
2 or d: Find functions called by this function
3 or c: Find functions calling this function
4 or t: Find this text string
6 or e: Find this egrep pattern
7 or f: Find this file
8 or i: Find files #including this file
9 or a: Find places where this symbol is assigned a value
